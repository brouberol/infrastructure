#!/usr/bin/env python3

# {{ ansible_managed }}

import argparse
import calendar
import json
import logging
import os.path
from collections import defaultdict
from datetime import date, datetime

import requests
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry

MAX_MONTHLY_HOURS = 50
NEW_MAX_MONTHLY_HOURS = 60
NEW_MAX_MONTHLY_HOURS_DATE = date(2023, 10, 1)
RAISE_START_DATE = date(2023, 9, 1)


logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

tok = "{{ notion_token }}"
database_id = "{{ notion_database_id }}"


def get_max_monthly_hours(month_start_date):
    if month_start_date >= NEW_MAX_MONTHLY_HOURS_DATE:
        logging.info(
            f"New max hours per month are in effect as of {NEW_MAX_MONTHLY_HOURS_DATE}: {NEW_MAX_MONTHLY_HOURS}"
        )
        return NEW_MAX_MONTHLY_HOURS
    logging.info(f"Max hours per month: {MAX_MONTHLY_HOURS}")
    return MAX_MONTHLY_HOURS


class NotionClient:
    def __init__(self, database_id, token):
        self.database_id = database_id
        self.token = token
        self.base_url = "https://api.notion.com/v1"
        self.timeout = 20
        self.session = requests.Session()
        self.session.headers.update({"Authorization": f"Bearer {self.token}"})
        self.session.headers.update({"Notion-Version": "2022-02-22"})
        self.session.headers.update({"Content-Type": "application/json"})
        retry_strategy = Retry(
            total=3, status_forcelist=[429, 500, 502, 503, 504], backoff_factor=2
        )
        self.session.mount("https://", HTTPAdapter(max_retries=retry_strategy))

    @property
    def db_url(self):
        return f"{self.base_url}/databases/{self.database_id}"

    @property
    def page_url(self):
        return f"{self.base_url}/pages"

    def _request(self, method, url, data):
        resp = getattr(self.session, method)(
            url, data=json.dumps(data), timeout=self.timeout
        )
        resp.raise_for_status()
        return resp.json()

    def query_database(self, filters, sorts):
        return self._request(
            "post", f"{self.db_url}/query", data={"filter": filters, "sorts": sorts}
        )

    def update_page(self, page_id, duration):
        return self._request(
            "patch",
            f"{self.page_url}/{page_id}",
            data={"properties": {"Duration": {"number": duration}}},
        )

    def create_page(self, title, date, duration):
        data = {
            "parent": {"database_id": self.database_id},
            "properties": {
                "Name": {"title": [{"text": {"content": title}}]},
                "Date": {"date": {"start": str(date)}},
                "Duration": {"number": duration},
            },
        }
        return self._request("post", self.page_url, data=data)


class Row:
    def __init__(self, data):
        self.data = data

    @property
    def duration(self):
        duration_data = self.data["properties"].get("Duration")
        if not duration_data:
            return None
        return duration_data["number"]

    @property
    def start_date(self):
        return datetime.strptime(
            self.data["properties"]["Date"]["date"]["start"], "%Y-%m-%d"
        ).date()


notion = NotionClient(database_id, tok)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--year", type=int)
    parser.add_argument("--month", type=int, choices=range(1, 13))
    parser.add_argument("-n", "--dry-run", action="store_true", default=False)
    return parser.parse_args()


def month_start_day(year, month):
    return date(year, month, 1)


def month_end_day(year, month):
    number_of_days_in_month = calendar.monthrange(year=year, month=month)[1]
    end_of_month = month_start_day(year, month).replace(day=number_of_days_in_month)
    return end_of_month


def get_month_total_hours(month_start, month_end):
    for row in filter_rows(title="CESU", start_date=month_start, end_date=month_end):
        return row.duration
    return 0


def filter_rows(title, start_date, end_date):
    items = notion.query_database(
        filters={
            "and": [
                {"property": "Date", "date": {"on_or_after": str(start_date)}},
                {"property": "Date", "date": {"on_or_before": str(end_date)}},
            ]
        },
        sorts=[{"property": "Date", "direction": "ascending"}],
    )
    rows = []

    for item in items["results"]:
        item_titles = item["properties"]["Name"]["title"]
        if not item_titles:
            continue
        item_title = item_titles[0]["plain_text"]
        if title in item_title:
            rows.append(Row(item))
    return rows


def month_total_work_hours(month_start, month_end):
    worked_h, extra_h = 0, defaultdict(int)
    for row in filter_rows(title="Nicolas", start_date=month_start, end_date=month_end):
        work_h = row.duration
        if not work_h:
            continue
        worked_h += work_h
        logging.info(f"{work_h}h of work were reported on {row.start_date}")
        extra_h["car rides"] += 1
        if month_start >= RAISE_START_DATE:
            extra_h["raise"] += 1
    logging.info(f"Total of {worked_h} worked hours")
    for reason, hours in extra_h.items():
        logging.info(f"Adding {hours} extra hours to account for {reason}")
    total_h = worked_h + sum(extra_h.values())
    logging.info(f"Consolidated total worked hours: {total_h}h")
    return total_h


def create_or_update_row(title, date, total_h):
    rows = filter_rows(title, start_date=date, end_date=date)
    if rows:
        # already exists
        notion.update_page(page_id=rows[0].data["id"], duration=total_h)
    else:
        notion.create_page(title=title, date=date, duration=total_h)


def report_total_hours_on_month(month_end, total_h, dry_run):
    prefix = "[DRY RUN] " if dry_run else ""
    logging.info(f"{prefix}Reporting {total_h}h to the CESU row of {month_end}")
    if not dry_run:
        create_or_update_row("ðŸ”” CESU", month_end, total_h)


def find_next_month(current_month, offset):
    if current_month + offset > 12:
        return current_month + offset - 12
    return current_month + offset


def get_max_monthly_hours_override(year, month):
    override_filepath = os.path.join(
        os.path.expanduser("~"), "notion", "overrides.json"
    )
    try:
        with open(override_filepath) as override_f:
            override_data = json.load(override_f)
    except FileNotFoundError:
        return None
    else:
        if (
            override_data.get(str(year))
            and override_data[str(year)].get(str(month)) is not None
        ):
            return override_data[str(year)][str(month)]
        else:
            return None


def main():
    args = parse_args()
    month_start = month_start_day(args.year, args.month)
    month_end = month_end_day(args.year, args.month)
    max_monthly_hours = get_max_monthly_hours(month_start)
    total_h = month_total_work_hours(month_start, month_end)
    already_reported_work_h = get_month_total_hours(month_start, month_end)
    logging.info(
        f"Total work hours for {calendar.month_name[month_start.month]}: {total_h}, "
        f"already reported {already_reported_work_h}h"
    )

    max_monthly_hours_override = get_max_monthly_hours_override(args.year, args.month)
    if max_monthly_hours_override is not None:
        logging.info(
            f"Override set for {args.year}-{args.month} to {max_monthly_hours_override}h"
        )
        max_hours_for_current_month = max_monthly_hours_override
    else:
        max_hours_for_current_month = max_monthly_hours

    if total_h + already_reported_work_h > max_hours_for_current_month:
        if already_reported_work_h < max_hours_for_current_month:
            report_total_hours_on_month(
                month_end, max_hours_for_current_month, args.dry_run
            )
            total_h = total_h + already_reported_work_h - max_hours_for_current_month

        i = 1
        while total_h > 0:
            next_month = find_next_month(args.month, i)
            next_year = args.year if (args.month + i) <= 12 else args.year + 1
            next_month_start_day = month_start_day(next_year, next_month)
            next_month_end_day = month_end_day(next_year, next_month)
            already_reported_hours_for_next_month = get_month_total_hours(
                next_month_end_day, next_month_end_day
            )
            total_h += already_reported_hours_for_next_month
            month_max_hours = get_max_monthly_hours_override(
                next_year, next_month
            ) or get_max_monthly_hours(next_month_start_day)
            if total_h > month_max_hours:
                total_h -= month_max_hours
                report_total_hours_on_month(
                    next_month_end_day, month_max_hours, args.dry_run
                )
            else:
                report_total_hours_on_month(next_month_end_day, total_h, args.dry_run)
                total_h = 0
            i += 1
    else:
        report_total_hours_on_month(
            month_end, total_h + already_reported_work_h, args.dry_run
        )


if __name__ == "__main__":
    main()
