#!{{ user_home }}/notion/.env/bin/python

import logging
import calendar
import argparse

from datetime import date
from notion.client import NotionClient


logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

tok = "{{ notion_token }}"

calendar_url = "{{ notion_cesu_calendar_url }}"

notion = NotionClient(token_v2=tok)
cal = notion.get_collection_view(calendar_url)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--year", type=int)
    parser.add_argument("--month", type=int, choices=range(1, 13))
    return parser.parse_args()


def month_start_day(year, month):
    return date(year, month, 1)


def month_end_day(year, month):
    number_of_days_in_month = calendar.monthrange(year=year, month=month)[1]
    end_of_month = month_start_day(year, month).replace(day=number_of_days_in_month)
    return end_of_month


def get_month_total_hours(month_start, month_end):
    for row in filter_rows(title="CESU", start_date=month_start, end_date=month_end):
        return row.get_property("duration") or 0
    return 0


def filter_rows(title, start_date, end_date):
    rows = cal.collection.query(
        filter={
            "operator": "and",
            "filters": [
                {
                    "property": "c=qu",
                    "filter": {
                        "operator": "date_is_on_or_after",
                        "value": {
                            "type": "exact",
                            "value": {"type": "date", "start_date": str(start_date)},
                        },
                    },
                },
                {
                    "property": "c=qu",
                    "filter": {
                        "operator": "date_is_on_or_before",
                        "value": {
                            "type": "exact",
                            "value": {"type": "date", "start_date": str(end_date)},
                        },
                    },
                },
            ],
        }
    )
    return [row for row in rows if title in row.title]


def month_total_work_hours(month_start, month_end):
    # total_h = get_extra_hours(month_start, month_end)
    total_h = 0
    for row in filter_rows(title="Nicolas", start_date=month_start, end_date=month_end):
        work_h = row.get_property("duration")
        if not work_h:
            continue
        total_h += work_h
        logging.info(f"{work_h}h of work were reported on {row.date.start}")
    return total_h


def create_or_update_row(title, date, **properties):
    for row in cal.collection.get_rows(search=title):
        if row.date.start == date:
            # already exists
            for prop, val in properties.items():
                row.set_property(prop, val)
            return
    cal.collection.add_row(title=title, date=date, **properties)


def report_total_hours_on_month(month_end, total_h):
    logging.info(f"Reporting {total_h}h to the CESU row of {month_end}")
    create_or_update_row("ðŸ”” CESU", month_end, duration=total_h)


def find_next_month(current_month, offset):
    if current_month + offset > 12:
        return current_month + offset - 12
    return current_month + offset


def main():
    args = parse_args()
    month_start = month_start_day(args.year, args.month)
    month_end = month_end_day(args.year, args.month)
    total_h = month_total_work_hours(month_start, month_end)
    already_reported_work_h = get_month_total_hours(month_start, month_end)
    logging.info(
        f"Total work hours for {calendar.month_name[month_start.month]}: {total_h}, already reported {already_reported_work_h}h"
    )
    if total_h + already_reported_work_h > 40:
        if already_reported_work_h < 40:
            report_total_hours_on_month(month_end, 40)
            total_h = total_h + already_reported_work_h - 40

        i = 1
        while total_h > 0:
            next_month = find_next_month(args.month, i)
            next_year = args.year if (args.month + i) <= 12 else args.year + 1
            next_month_end_day = month_end_day(next_year, next_month)
            already_reported_hours_for_next_month = get_month_total_hours(next_month_end_day, next_month_end_day)
            total_h += already_reported_hours_for_next_month
            if total_h > 40:
                total_h -= 40
                report_total_hours_on_month(next_month_end_day, 40)
            else:
                report_total_hours_on_month(next_month_end_day, total_h)
                total_h = 0
            i += 1
    else:
        report_total_hours_on_month(month_end, total_h + already_reported_work_h)


if __name__ == "__main__":
    main()